{"version":3,"file":"WebHookAuthHttpClient.js","sourceRoot":"","sources":["../../../../src/notification/webhook-subscription-2021/webhook-auth/WebHookAuthHttpClient.ts"],"names":[],"mappings":";;;AACA,+BAA8C;AAC9C,iCAAgD;AAChD,6BAA0B;AAC1B,gDAAgD;AAChD,0CAA0C;AAC1C,gDAAgD;AAChD,wCAAwC;AAGxC,kFAA+E;AAC/E,qDAA6D;AAC7D,6DAAoD;AAOpD,MAAa,qBAAqB;IAIhC,YAAmB,IAA+B;QAChD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;IAEM,IAAI,CACT,GAAiB,EACjB,OAAuB,EACvB,IAAS,EACT,QAAuD;QAEvD,MAAM,SAAS,GAAG,GAAG,YAAY,SAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,SAAG,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,gBAAgB;aAClB,cAAc,CAAC,iCAAY,CAAC;aAC5B,IAAI,CAAC,CAAC,IAAqB,EAAQ,EAAE;YACpC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,GAAG,EAAE;gBACR,MAAM,IAAI,yCAAmB,CAAC,mBAAmB,CAAC,CAAC;aACpD;YACD,gBAAQ,CAAC,GAAG,EAAE,OAAO,CAAC;iBACnB,IAAI,CAAC,CAAC,UAAU,EAAQ,EAAE;gBACzB,MAAM,MAAM,GAAG;oBACb,GAAG,EAAE,SAAS,CAAC,QAAQ,EAAE;oBACzB,GAAG,EAAE,MAAM;iBACZ,CAAC;gBACF,IAAI,cAAO,CAAC,MAAM,CAAC;qBAChB,kBAAkB,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;qBACpC,WAAW,EAAE;qBACb,SAAS,CAAC,8BAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC5C,iBAAiB,CAAC,KAAK,CAAC;qBACxB,IAAI,CAAC,UAAU,CAAC;qBAChB,IAAI,CAAC,CAAC,SAAiB,EAAQ,EAAE;oBAChC,MAAM,gBAAgB,GAAmB;wBACvC,GAAG,OAAO;wBACV,OAAO,EAAE;4BACP,GAAG,OAAO,CAAC,OAAO;4BAClB,aAAa,EAAE,SAAS;yBACzB;qBACF,CAAC;oBACF,MAAM,aAAa,GACjB,SAAS,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,eAAY,CAAC,CAAC,CAAC,cAAW,CAAC;oBAE9D,MAAM,GAAG,GAAG,aAAa,CACvB,SAAS,CAAC,QAAQ,EAAE,EACpB,gBAAgB,EAChB,QAAQ,CACT,CAAC;oBACF,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAChB,GAAG,CAAC,GAAG,EAAE,CAAC;gBACZ,CAAC,CAAC;qBACD,KAAK,CAAC,CAAC,GAAY,EAAQ,EAAE;oBAC5B,MAAM,GAAG,CAAC;gBACZ,CAAC,CAAC,CAAC;YACP,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAY,EAAQ,EAAE;gBAC5B,MAAM,GAAG,CAAC;YACZ,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAY,EAAQ,EAAE;YAC5B,MAAM,GAAG,CAAC;QACZ,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAlED,sDAkEC","sourcesContent":["import type { RequestOptions, IncomingMessage } from 'http';\nimport { request as httpRequest } from 'http';\nimport { request as httpsRequest } from 'https';\nimport { URL } from 'url';\n// eslint-disable-next-line import/no-unresolved\nimport { parseJwk } from 'jose/jwk/parse';\n// eslint-disable-next-line import/no-unresolved\nimport { SignJWT } from 'jose/jwt/sign';\nimport type { HttpClient } from '../../../http/client/HttpClient';\nimport type { JwksKeyGenerator } from '../../../identity/configuration/JwksKeyGenerator';\nimport { InternalServerError } from '../../../util/errors/InternalServerError';\nimport { trimTrailingSlashes } from '../../../util/PathUtil';\nimport { POD_JWKS_KEY } from './PodJwksHttpHandler';\n\nexport interface WebHookAuthHttpClientArgs {\n  jwksKeyGenerator: JwksKeyGenerator;\n  baseUrl: string;\n}\n\nexport class WebHookAuthHttpClient implements HttpClient {\n  private readonly jwksKeyGenerator: JwksKeyGenerator;\n  private readonly baseUrl: string;\n\n  public constructor(args: WebHookAuthHttpClientArgs) {\n    this.jwksKeyGenerator = args.jwksKeyGenerator;\n    this.baseUrl = args.baseUrl;\n  }\n\n  public call(\n    url: string | URL,\n    options: RequestOptions,\n    data: any,\n    callback?: ((res: IncomingMessage) => void) | undefined,\n  ): void {\n    const parsedUrl = url instanceof URL ? url : new URL(url);\n    this.jwksKeyGenerator\n      .getPrivateJwks(POD_JWKS_KEY)\n      .then((jwks: { keys: any[] }): void => {\n        const jwk = jwks.keys[0];\n        if (!jwk) {\n          throw new InternalServerError('No jwk available.');\n        }\n        parseJwk(jwk, 'RS256')\n          .then((jwkKeyLike): void => {\n            const jwtRaw = {\n              htu: parsedUrl.toString(),\n              htm: 'POST',\n            };\n            new SignJWT(jwtRaw)\n              .setProtectedHeader({ alg: 'RS256' })\n              .setIssuedAt()\n              .setIssuer(trimTrailingSlashes(this.baseUrl))\n              .setExpirationTime('20m')\n              .sign(jwkKeyLike)\n              .then((signedJwt: string): void => {\n                const augmentedOptions: RequestOptions = {\n                  ...options,\n                  headers: {\n                    ...options.headers,\n                    authorization: signedJwt,\n                  },\n                };\n                const requestClient =\n                  parsedUrl.protocol === 'https' ? httpsRequest : httpRequest;\n\n                const req = requestClient(\n                  parsedUrl.toString(),\n                  augmentedOptions,\n                  callback,\n                );\n                req.write(data);\n                req.end();\n              })\n              .catch((err: unknown): void => {\n                throw err;\n              });\n          })\n          .catch((err: unknown): void => {\n            throw err;\n          });\n      })\n      .catch((err: unknown): void => {\n        throw err;\n      });\n  }\n}\n"]}